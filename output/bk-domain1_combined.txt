I am working on an application with the following stack:
- Go Backend
- SQLite Database

You are my coding assistant. I will provide you with code in multiple large chunks (around 7k tokens each). After I paste each chunk, do not provide any analysis or commentary. Simply respond with the letter "y" to acknowledge receipt. Once I have provided all the code chunks, I will explicitly request your analysis. Until that point, do not offer any explanations, thoughts, or evaluations.

Understood?

=== End of prompts/instructions.md ===

package main

import (
	"log"
	"net/http"
	"os"
	"strings"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	_ "github.com/robstave/go-template/docs"
	"github.com/robstave/go-template/internal/adapters/controller"
	"github.com/robstave/go-template/internal/adapters/repositories"
	"github.com/robstave/go-template/internal/domain"
	"github.com/robstave/go-template/internal/domain/types"
	"github.com/robstave/go-template/internal/logger"
	httpSwagger "github.com/swaggo/echo-swagger"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

// @title go-template
// @version 1.0
// @description API documentation for go-template
// @BasePath /api
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
func main() {
	// Initialize Logger
	slogger := logger.InitializeLogger()
	logger.SetLogger(slogger) // Optional: If you prefer setting a package-level logger

	// Initialize Database
	dbPath := "./go-template.db"
	if path := os.Getenv("DB_PATH"); path != "" {
		dbPath = path
	}
	slogger.Info("DBPath set", "dbpath", dbPath)

	db, err := gorm.Open(sqlite.Open(dbPath), &gorm.Config{})

	if err != nil {
		slogger.Error("Failed to connect to database", "path", dbPath, "error", err)
		log.Fatalf("Failed to connect to database: %v", err)
	}

	err = db.AutoMigrate(&types.Widget{}) // Add this line
	if err != nil {
		slogger.Error("Failed to migrate database", "error", err)
		log.Fatalf("Failed to migrate database: %v", err)
	}

	// Initialize Repositories
	repo := repositories.NewRepositorySQLite(db)

	// Initialize Service
	service := domain.NewService(slogger, repo)

	// Initialize Controller
	controller := controller.NewController(service, slogger)

	// Initialize Echo
	e := echo.New()

	// Middleware
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())

	e.Use(middleware.CORS())
	/*
		e.Use(middleware.CORSWithConfig(middleware.CORSConfig{
			AllowOrigins: []string{"*", "http://localhost:8789", "http://192.168.86.176:8789", "http://localhost:3000"}, // Update as needed
			AllowMethods: []string{echo.GET, echo.POST, echo.PUT, echo.DELETE, echo.OPTIONS},
			AllowHeaders: []string{
				"Content-Type",
				"Authorization",
			},
		}))
	*/

	// API Routes
	api := e.Group("/api")
	widgetGroup := api.Group("/widgets")

	// Widget routes
	widgetGroup.POST("", controller.CreateWidget)
	widgetGroup.GET("", controller.GetAllWidgets)
	widgetGroup.GET("/:id", controller.GetWidget)
	widgetGroup.PUT("/:id", controller.UpdateWidget)
	widgetGroup.DELETE("/:id", controller.DeleteWidget)

	// Swagger endpoint
	e.GET("/swagger/*", httpSwagger.WrapHandler)

	// Catch-all route to serve index.html for client-side routing
	e.GET("/*", func(c echo.Context) error {
		slogger.Info("other url", "path", c.Request().URL.Path)
		// Prevent Echo from serving API routes with this handler
		if strings.HasPrefix(c.Request().URL.Path, "/api/") {
			return c.NoContent(http.StatusNotFound)
		}
		path := c.Request().URL.Path

		// Redirect /swagger to /swagger/index.html#/
		if path == "/swagger" || path == "/swagger/" {
			return c.Redirect(http.StatusFound, "/swagger/index.html#/")
		}

		return c.NoContent(http.StatusNotFound)
	})

	// Start Server
	port := "8711"
	if p := os.Getenv("PORT"); p != "" {
		port = p
	}
	slogger.Info("Starting server", "port", port)
	if err := e.Start(":" + port); err != nil && err != http.ErrServerClosed {
		slogger.Error("Shutting down the server", "error", err)
		log.Fatalf("Shutting down the server: %v", err)
	}
}


=== End of cmd/main/main.go ===

// internal/domain/types/widget.go
package types

import (
	"time"
)

type Widget struct {
	ID        string    `gorm:"primaryKey" json:"id"`
	Name      string    `gorm:"uniqueIndex;size:100;not null" json:"name"`
	Value     string    `gorm:"size:255;not null" json:"value"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}


=== End of internal/domain/types/widget.go ===

// internal/domain/seeder.go
package domain

import (
	"github.com/google/uuid"
	"github.com/robstave/go-template/internal/domain/types"
)

func (s *Service) SeedWidget() error {
	// Default widget data
	defaultWidgets := []types.Widget{
		{
			ID:    uuid.New().String(),
			Name:  "Sample Widget 1",
			Value: "This is a sample widget to demonstrate functionality",
		},
		{
			ID:    uuid.New().String(),
			Name:  "Sample Widget 2",
			Value: "Another widget example for testing",
		},
	}

	// Check if we already have widgets
	existingWidgets, err := s.repo.GetAllWidgets()
	if err != nil {
		s.logger.Error("Failed to check existing widgets", "error", err)
		return err
	}

	// If we already have widgets, don't seed
	if len(existingWidgets) > 0 {
		s.logger.Info("Database already has widgets, skipping seed")
		return nil
	}

	// Create the sample widgets
	for _, widget := range defaultWidgets {
		if err := s.repo.CreateWidget(widget); err != nil {
			s.logger.Error("Failed to seed widget", "name", widget.Name, "error", err)
			return err
		}
		s.logger.Info("Seeded widget successfully", "id", widget.ID, "name", widget.Name)
	}

	s.logger.Info("Successfully seeded initial widgets")
	return nil
}


=== End of internal/domain/seeder.go ===

package domain

import (
	"log/slog"

	"github.com/robstave/go-template/internal/adapters/repositories"
	"github.com/robstave/go-template/internal/domain/types"
)

type Service struct {
	logger *slog.Logger
	repo   repositories.Repository
}

type Domain interface {
	GetWidgetByID(widgetID string) (*types.Widget, error)
	GetAllWidgets() ([]types.Widget, error)
	CreateWidget(widget types.Widget) (*types.Widget, error)
	UpdateWidget(widget types.Widget) (*types.Widget, error)
	DeleteWidget(widgetID string) error
	SeedWidget() error
}

// internal/domain/service.go
// ...
func NewService(logger *slog.Logger, repo repositories.Repository) Domain {
	service := &Service{
		logger: logger,
		repo:   repo,
	}

	// Seed the initial user.   This is called on every startup, but will only create the user if it doesn't already exist
	// To reset the app, just delete the database file  ( assuming you're using the default sqlite3 database )
	if err := service.SeedWidget(); err != nil {
		logger.Error("Failed to seed initial user", "error", err)
	}

	return service
}


=== End of internal/domain/service.go ===

// internal/domain/widgets.go
package domain

import (
	"errors"

	"github.com/google/uuid"
	"github.com/robstave/go-template/internal/domain/types"
)

func (s *Service) GetWidgetByID(widgetID string) (*types.Widget, error) {
	s.logger.Info("Retrieving widget by ID", "widgetID", widgetID)

	widget, err := s.repo.GetWidgetById(widgetID)
	if err != nil {
		s.logger.Error("Error retrieving widget", "error", err)
		return nil, err
	}

	if widget == nil {
		s.logger.Warn("Widget not found", "widgetID", widgetID)
		return nil, errors.New("widget not found")
	}

	return widget, nil
}

func (s *Service) GetAllWidgets() ([]types.Widget, error) {
	s.logger.Info("Retrieving all widgets")

	widgets, err := s.repo.GetAllWidgets()
	if err != nil {
		s.logger.Error("Error retrieving all widgets", "error", err)
		return nil, err
	}

	return widgets, nil
}

func (s *Service) CreateWidget(widget types.Widget) (*types.Widget, error) {
	s.logger.Info("Creating new widget", "name", widget.Name)

	// Generate UUID if not provided
	if widget.ID == "" {
		widget.ID = uuid.New().String()
	}

	if err := s.repo.CreateWidget(widget); err != nil {
		s.logger.Error("Failed to create widget", "error", err)
		return nil, err
	}

	return &widget, nil
}

func (s *Service) UpdateWidget(widget types.Widget) (*types.Widget, error) {
	s.logger.Info("Updating widget", "id", widget.ID)

	// Check if widget exists
	existingWidget, err := s.repo.GetWidgetById(widget.ID)
	if err != nil {
		s.logger.Error("Error checking widget existence", "error", err)
		return nil, err
	}

	if existingWidget == nil {
		s.logger.Warn("Widget not found for update", "id", widget.ID)
		return nil, errors.New("widget not found")
	}

	if err := s.repo.UpdateWidget(widget); err != nil {
		s.logger.Error("Failed to update widget", "error", err)
		return nil, err
	}

	return &widget, nil
}

func (s *Service) DeleteWidget(widgetID string) error {
	s.logger.Info("Deleting widget", "id", widgetID)

	// Check if widget exists
	existingWidget, err := s.repo.GetWidgetById(widgetID)
	if err != nil {
		s.logger.Error("Error checking widget existence", "error", err)
		return err
	}

	if existingWidget == nil {
		s.logger.Warn("Widget not found for deletion", "id", widgetID)
		return errors.New("widget not found")
	}

	if err := s.repo.DeleteWidget(widgetID); err != nil {
		s.logger.Error("Failed to delete widget", "error", err)
		return err
	}

	return nil
}


=== End of internal/domain/widgets.go ===

